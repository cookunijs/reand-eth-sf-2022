/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ReandInterface extends ethers.utils.Interface {
  functions: {
    "TRANSFER_REQUEST_ID()": FunctionFragment;
    "createAnd((address,(bytes4,bytes),(bytes4,bytes)))": FunctionFragment;
    "getAnd(address,uint256,uint256)": FunctionFragment;
    "getCompleted(bytes32)": FunctionFragment;
    "getSupportedRequests()": FunctionFragment;
    "getVerified(address,bytes4)": FunctionFragment;
    "getZKPRequest(uint64)": FunctionFragment;
    "owner()": FunctionFragment;
    "proofs(address,uint64)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestQueries(uint64)": FunctionFragment;
    "requestValidators(uint64)": FunctionFragment;
    "setZKPRequest(uint64,address,(uint256,uint256,uint256,uint256[],string))": FunctionFragment;
    "submitZKPResponse(uint64,uint256[],uint256[2],uint256[2][2],uint256[2])": FunctionFragment;
    "supportedRequests(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyWithWorldId(address,uint256,uint256,uint256[8])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TRANSFER_REQUEST_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAnd",
    values: [
      {
        executor: string;
        originAsset: { assetClass: BytesLike; data: BytesLike };
        childAsset: { assetClass: BytesLike; data: BytesLike };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnd",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompleted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerified",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getZKPRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proofs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestQueries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestValidators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setZKPRequest",
    values: [
      BigNumberish,
      string,
      {
        schema: BigNumberish;
        slotIndex: BigNumberish;
        operator: BigNumberish;
        value: BigNumberish[];
        circuitId: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitZKPResponse",
    values: [
      BigNumberish,
      BigNumberish[],
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyWithWorldId",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "TRANSFER_REQUEST_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createAnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZKPRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proofs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestQueries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZKPRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitZKPResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyWithWorldId",
    data: BytesLike
  ): Result;

  events: {
    "Anded(address,address,uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Verified(address,bytes4)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Anded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Verified"): EventFragment;
}

export type AndedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    executor: string;
    originToken: string;
    originTokenId: BigNumber;
    childToken: string;
    childTokenId: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type VerifiedEvent = TypedEvent<
  [string, string] & { account: string; idType: string }
>;

export class Reand extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReandInterface;

  functions: {
    TRANSFER_REQUEST_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    createAnd(
      order: {
        executor: string;
        originAsset: { assetClass: BytesLike; data: BytesLike };
        childAsset: { assetClass: BytesLike; data: BytesLike };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAnd(
      originToken: string,
      originTokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getCompleted(id: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    getSupportedRequests(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { arr: BigNumber[] }>;

    getVerified(
      account: string,
      idType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getZKPRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber[], string] & {
          schema: BigNumber;
          slotIndex: BigNumber;
          operator: BigNumber;
          value: BigNumber[];
          circuitId: string;
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proofs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestQueries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        schema: BigNumber;
        slotIndex: BigNumber;
        operator: BigNumber;
        circuitId: string;
      }
    >;

    requestValidators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setZKPRequest(
      requestId: BigNumberish,
      validator: string,
      query: {
        schema: BigNumberish;
        slotIndex: BigNumberish;
        operator: BigNumberish;
        value: BigNumberish[];
        circuitId: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitZKPResponse(
      requestId: BigNumberish,
      inputs: BigNumberish[],
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyWithWorldId(
      account: string,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TRANSFER_REQUEST_ID(overrides?: CallOverrides): Promise<BigNumber>;

  createAnd(
    order: {
      executor: string;
      originAsset: { assetClass: BytesLike; data: BytesLike };
      childAsset: { assetClass: BytesLike; data: BytesLike };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAnd(
    originToken: string,
    originTokenId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getCompleted(id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  getSupportedRequests(overrides?: CallOverrides): Promise<BigNumber[]>;

  getVerified(
    account: string,
    idType: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getZKPRequest(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber[], string] & {
      schema: BigNumber;
      slotIndex: BigNumber;
      operator: BigNumber;
      value: BigNumber[];
      circuitId: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  proofs(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestQueries(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      schema: BigNumber;
      slotIndex: BigNumber;
      operator: BigNumber;
      circuitId: string;
    }
  >;

  requestValidators(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setZKPRequest(
    requestId: BigNumberish,
    validator: string,
    query: {
      schema: BigNumberish;
      slotIndex: BigNumberish;
      operator: BigNumberish;
      value: BigNumberish[];
      circuitId: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitZKPResponse(
    requestId: BigNumberish,
    inputs: BigNumberish[],
    a: [BigNumberish, BigNumberish],
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    c: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyWithWorldId(
    account: string,
    root: BigNumberish,
    nullifierHash: BigNumberish,
    proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TRANSFER_REQUEST_ID(overrides?: CallOverrides): Promise<BigNumber>;

    createAnd(
      order: {
        executor: string;
        originAsset: { assetClass: BytesLike; data: BytesLike };
        childAsset: { assetClass: BytesLike; data: BytesLike };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getAnd(
      originToken: string,
      originTokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getCompleted(id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    getSupportedRequests(overrides?: CallOverrides): Promise<BigNumber[]>;

    getVerified(
      account: string,
      idType: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getZKPRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber[], string] & {
        schema: BigNumber;
        slotIndex: BigNumber;
        operator: BigNumber;
        value: BigNumber[];
        circuitId: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    proofs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestQueries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        schema: BigNumber;
        slotIndex: BigNumber;
        operator: BigNumber;
        circuitId: string;
      }
    >;

    requestValidators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setZKPRequest(
      requestId: BigNumberish,
      validator: string,
      query: {
        schema: BigNumberish;
        slotIndex: BigNumberish;
        operator: BigNumberish;
        value: BigNumberish[];
        circuitId: string;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    submitZKPResponse(
      requestId: BigNumberish,
      inputs: BigNumberish[],
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportedRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyWithWorldId(
      account: string,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Anded(address,address,uint256,address,uint256)"(
      executor?: null,
      originToken?: null,
      originTokenId?: null,
      childToken?: null,
      childTokenId?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        executor: string;
        originToken: string;
        originTokenId: BigNumber;
        childToken: string;
        childTokenId: BigNumber;
      }
    >;

    Anded(
      executor?: null,
      originToken?: null,
      originTokenId?: null,
      childToken?: null,
      childTokenId?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        executor: string;
        originToken: string;
        originTokenId: BigNumber;
        childToken: string;
        childTokenId: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Verified(address,bytes4)"(
      account?: null,
      idType?: null
    ): TypedEventFilter<[string, string], { account: string; idType: string }>;

    Verified(
      account?: null,
      idType?: null
    ): TypedEventFilter<[string, string], { account: string; idType: string }>;
  };

  estimateGas: {
    TRANSFER_REQUEST_ID(overrides?: CallOverrides): Promise<BigNumber>;

    createAnd(
      order: {
        executor: string;
        originAsset: { assetClass: BytesLike; data: BytesLike };
        childAsset: { assetClass: BytesLike; data: BytesLike };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAnd(
      originToken: string,
      originTokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompleted(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedRequests(overrides?: CallOverrides): Promise<BigNumber>;

    getVerified(
      account: string,
      idType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getZKPRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proofs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestQueries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestValidators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setZKPRequest(
      requestId: BigNumberish,
      validator: string,
      query: {
        schema: BigNumberish;
        slotIndex: BigNumberish;
        operator: BigNumberish;
        value: BigNumberish[];
        circuitId: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitZKPResponse(
      requestId: BigNumberish,
      inputs: BigNumberish[],
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyWithWorldId(
      account: string,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TRANSFER_REQUEST_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAnd(
      order: {
        executor: string;
        originAsset: { assetClass: BytesLike; data: BytesLike };
        childAsset: { assetClass: BytesLike; data: BytesLike };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAnd(
      originToken: string,
      originTokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompleted(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerified(
      account: string,
      idType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getZKPRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proofs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestQueries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestValidators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setZKPRequest(
      requestId: BigNumberish,
      validator: string,
      query: {
        schema: BigNumberish;
        slotIndex: BigNumberish;
        operator: BigNumberish;
        value: BigNumberish[];
        circuitId: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitZKPResponse(
      requestId: BigNumberish,
      inputs: BigNumberish[],
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyWithWorldId(
      account: string,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
